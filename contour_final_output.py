# -*- coding: utf-8 -*-
"""CONTOUR  FINAL OUTPUT.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SrrEHU-kQddoW9FdppPPDaI9ePch4n5F
"""

import cv2
import numpy as np
import os
import matplotlib.pyplot as plt

# Mount Google Drive
from google.colab import drive
drive.mount('/content/drive')

def load_images_from_folder(folder):
    images = {}
    for filename in os.listdir(folder):
        category = []
        path = folder + "/" + filename
        for cat in os.listdir(path):
            img_path = os.path.join(path, cat)
            img = cv2.imread(img_path, 0)
            if img is not None:
                category.append(img)
        images[filename] = category
    return images

images = load_images_from_folder("/content/drive/MyDrive/7010 dataset") 

for category, image_list in images.items():
    for image in image_list:
      
        blurred_image = cv2.GaussianBlur(np.array(image, dtype=np.uint8), (5,5), 0)    
        edges = cv2.Canny(blurred_image, 100, 160)
        # Display the resultant contour image of edges
        plt.figure(figsize=[10,10])
        plt.imshow(edges,cmap='Greys_r')
        plt.title("Edges Image")
        plt.axis("off")

  # Create the output directory if it doesn't exist
output_dir = "/content/drive/MyDrive/7010 contour output "
if not os.path.exists(output_dir):
    os.makedirs(output_dir)

for category, image_list in images.items():
    for image in image_list:
        # Convert image to a grayscale numpy array
        blurred_image = cv2.GaussianBlur(np.array(image, dtype=np.uint8), (5,5), 0)
        
        # Apply canny edge detection
        edges = cv2.Canny(blurred_image, 100, 160)

        # Save the resultant contour image of edges
        output_path = os.path.join(output_dir, f"{category}_{image}.jpg")
        cv2.imwrite(output_path, edges)

from google.colab import drive
drive.mount('/content/drive')

















